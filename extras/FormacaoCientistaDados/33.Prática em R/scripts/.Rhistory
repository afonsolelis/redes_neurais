install.packages("neuralnet")
install.packages("neuralnet")
install.packages('mltools')
install.packages('data.table')
install.packages("caret", dependencies=T)
#install.packages("neuralnet")
#install.packages('mltools')
#install.packages('data.table')
#install.packages("caret", dependencies=T)
library(neuralnet)
library(mltools)
library(data.table)
library(caret)
iris2 =  scale(iris[,1:4])
iris2 = as.data.frame(iris2)
#Adiciona a classe
iris2$Species = iris$Species
iris2
set.seed(1234)
particao = createDataPartition(1:dim(iris2)[1],p=.7)
iristreino = iris2[particao$Resample1,]
iristeste = iris2[- particao$Resample1,]
dim(iristreino)
dim(iristeste)
#Juntamos os atributos com a classe para não perde-los
iristreino = cbind(iristreino[,1:4],one_hot(as.data.table( iristreino[,5])))
iristreino
modelo = neuralnet( V1_setosa  + V1_versicolor  +  V1_virginica  ~ Sepal.Length + Sepal.Width +  Petal.Length + Petal.Width , iristreino, hidden=c(5,4))
print(modelo)
plot(modelo)
teste = compute(modelo,iristeste[,1:4])
teste$net.result
resultado = as.data.frame(teste$net.result)
resultado
names(resultado)[1] <- 'setosa'
names(resultado)[2] <- 'versicolor'
names(resultado)[3] <- 'virginica'
resultado
resultado$class = colnames(resultado[,1:3])[max.col(resultado[,1:3], ties.method = 'first')]
resultado
confusao = table(resultado$class,iristeste$Species)
confusao
sum(diag(confusao) * 100 / sum(confusao))
#install.packages("h2o")
library(h2o)
install.packages("h2o")
#install.packages("h2o")
library(h2o)
install.packages("h2o")
#uso interno
options(warn=-1)
digitos <- read.csv(gzfile("test.csv.gz"), header=F)
dim(digitos)
head(digitos)
dig1 = t(matrix(unlist(digitos[20,-785]), nrow = 28, byrow = F))
dig1 = t(apply(dig, 2, rev))
#install.packages('randomForest',dependencies=T)
library(randomForest)
install.packages('randomForest',dependencies=T)
install.packages("randomForest", dependencies = T)
#install.packages('randomForest',dependencies=T)
library(randomForest)
#carrega os dados de exemplo
soja = read.csv('soybean.csv', stringsAsFactors = T)
soja
dim(soja)
#classes
unique(soja$class)
#gera dois conjuntos de dados aleatórios, para teste e treino
#com 70 e 30% das instâncias, aproximadamente
amostra = sample(2,683,replace=T, prob=c(0.7,0.3))
sojatreino = soja[amostra==1,]
sojateste = soja[amostra==2,]
#constrói o modelo usando dados de treino
floresta = randomForest(class ~ .,data=sojatreino, ntree=100,proximity=T)
floresta
#testa o modelo fazendo previsão com dados de teste
previsao = predict(floresta,sojateste)
previsao
#matriz de confusao
floresta$confusion
#Precisão
1- mean(floresta$confusion[,'class.error'])
